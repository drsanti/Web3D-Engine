"use strict";function _interopDefault(ex){return ex&&"object"==typeof ex&&"default"in ex?ex.default:ex}Object.defineProperty(exports,"__esModule",{value:!0});var THREE=require("three"),CANNON=require("cannon"),OrbitControls=_interopDefault(require("threejs-orbit-controls")),GLTFLoader=_interopDefault(require("three-gltf-loader")),threeCss2drender=require("three-css2drender"),Stats=function(){var mode=0,container=document.createElement("div");function addPanel(panel){return container.appendChild(panel.dom),panel}function showPanel(id){for(var i=0;i<container.children.length;i++)container.children[i].style.display=i===id?"block":"none";mode=id}container.style.cssText="position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000",container.addEventListener("click",function(event){event.preventDefault(),showPanel(++mode%container.children.length)},!1);var beginTime=(performance||Date).now(),prevTime=beginTime,frames=0,fpsPanel=addPanel(new Stats.Panel("FPS","#0af","#001")),msPanel=addPanel(new Stats.Panel("MS","#0f0","#121"));if(self.performance&&self.performance.memory)var memPanel=addPanel(new Stats.Panel("MB","#f0f","#212"));return showPanel(0),{REVISION:16,dom:container,addPanel:addPanel,showPanel:showPanel,begin:function(){beginTime=(performance||Date).now()},end:function(){frames++;var time=(performance||Date).now();if(msPanel.update(time-beginTime,200),time>=prevTime+1e3&&(fpsPanel.update(1e3*frames/(time-prevTime),100),prevTime=time,frames=0,memPanel)){var memory=performance.memory;memPanel.update(memory.usedJSHeapSize/1048576,memory.jsHeapSizeLimit/1048576)}return time},update:function(){beginTime=this.end()},domElement:container,setMode:showPanel}};Stats.Panel=function(name,fg,bg){var min=1/0,max=0,round=Math.round,PR=round(window.devicePixelRatio||1),WIDTH=80*PR,HEIGHT=48*PR,TEXT_X=3*PR,TEXT_Y=2*PR,GRAPH_X=3*PR,GRAPH_Y=15*PR,GRAPH_WIDTH=74*PR,GRAPH_HEIGHT=30*PR,canvas=document.createElement("canvas");canvas.width=WIDTH,canvas.height=HEIGHT,canvas.style.cssText="width:80px;height:48px";var context=canvas.getContext("2d");return context.font="bold "+9*PR+"px Helvetica,Arial,sans-serif",context.textBaseline="top",context.fillStyle=bg,context.fillRect(0,0,WIDTH,HEIGHT),context.fillStyle=fg,context.fillText(name,TEXT_X,TEXT_Y),context.fillRect(GRAPH_X,GRAPH_Y,GRAPH_WIDTH,GRAPH_HEIGHT),context.fillStyle=bg,context.globalAlpha=.9,context.fillRect(GRAPH_X,GRAPH_Y,GRAPH_WIDTH,GRAPH_HEIGHT),{dom:canvas,update:function(value,maxValue){min=Math.min(min,value),max=Math.max(max,value),context.fillStyle=bg,context.globalAlpha=1,context.fillRect(0,0,WIDTH,GRAPH_Y),context.fillStyle=fg,context.fillText(round(value)+" "+name+" ("+round(min)+"-"+round(max)+")",TEXT_X,TEXT_Y),context.drawImage(canvas,GRAPH_X+PR,GRAPH_Y,GRAPH_WIDTH-PR,GRAPH_HEIGHT,GRAPH_X,GRAPH_Y,GRAPH_WIDTH-PR,GRAPH_HEIGHT),context.fillRect(GRAPH_X+GRAPH_WIDTH-PR,GRAPH_Y,PR,GRAPH_HEIGHT),context.fillStyle=bg,context.globalAlpha=.9,context.fillRect(GRAPH_X+GRAPH_WIDTH-PR,GRAPH_Y,PR,round((1-value/maxValue)*GRAPH_HEIGHT))}}};class HelperUtils{constructor(graphics){this.graphics=graphics}createAmbientLight(options){options=options||{};const ambientLight=new THREE.AmbientLight(this.parseOption(options.color,16777215));return ambientLight.intensity=this.parseOption(options.intensity,1),ambientLight.castShadow=this.parseOption(options.castShadow,!1),ambientLight.name=this.parseOption(options.name,this.generateLightName("AmbiebtLight")),ambientLight}addAmbientLight(options){options=options||{};const ambientLight=this.createAmbientLight(options);return this.graphics.scene.add(ambientLight),this.graphics.ambientLights.push(ambientLight),ambientLight}addPointLight(options){options=options||{};const pointLight=this.createPointLight(options);if(this.graphics.scene.add(pointLight),options.useHelper){const pointLightHelper=this.createPointLightHelper(pointLight,{});this.graphics.scene.add(pointLightHelper)}return this.graphics.pointLights.push(pointLight),pointLight}createPointLight(options){options=options||{};const pointLight=new THREE.PointLight(this.parseOption(options.color,16777215));return pointLight.name=this.parseOption(options.name,this.generateLightName("PointLight")),pointLight.position.copy(this.parseOption(options.position,new THREE.Vector3(5,20,5))),pointLight.intensity=this.parseOption(options.intensity,1),pointLight.castShadow=this.parseOption(options.castShadow,!0),pointLight.distance=this.parseOption(options.distance,50),pointLight.decay=this.parseOption(options.decay,2),options.shadow=this.parseOption(options.shadow,{}),pointLight.shadow.bias=this.parseOption(options.shadow.bias,0),options.shadow.mapSize=this.parseOption(options.shadow.mapSize,{}),pointLight.shadow.mapSize.width=this.parseOption(options.shadow.mapSize.width,1024),pointLight.shadow.mapSize.height=this.parseOption(options.shadow.mapSize.height,1024),options.shadow.camera=this.parseOption(options.shadow.camera,{}),pointLight.shadow.camera.visible=this.parseOption(options.shadow.visible,!0),pointLight.shadow.camera.Fov=this.parseOption(options.shadow.Fov,90),pointLight.shadow.camera.near=this.parseOption(options.shadow.near,.5),pointLight.shadow.camera.far=this.parseOption(options.shadow.far,1e3),pointLight}createPointLightHelper(pointLight,options){const pointLightHelper=new THREE.PointLightHelper(pointLight,this.parseOption(options.size,.2),this.parseOption(options.color,pointLight.color));return pointLightHelper.name=pointLight.name+"-Helper",pointLightHelper}addSpotLight(options){options=options||{};const spotLight=this.createSpotLight(options);if(this.graphics.scene.add(spotLight),options.useHelper){const spotLightHelper=this.createSpotLightHelper(spotLight,{});this.graphics.scene.add(spotLightHelper)}return this.graphics.spotLights.push(spotLight),spotLight}createSpotLight(options){options=options||{};const spotLight=new THREE.SpotLight(this.parseOption(options.color,16777215));return spotLight.name=this.parseOption(options.name,this.generateLightName("SpotLight")),spotLight.position.copy(this.parseOption(options.position,new THREE.Vector3(5,10,5))),spotLight.intensity=this.parseOption(options.intensity,1),spotLight.castShadow=this.parseOption(options.castShadow,!0),spotLight.distance=this.parseOption(options.distance,500),spotLight.decay=this.parseOption(options.decay,2),spotLight.angle=this.parseOption(options.angle,Math.PI/4),spotLight.penumbra=this.parseOption(options.penumbra,.8),options.shadow=this.parseOption(options.shadow,{}),spotLight.shadow.bias=this.parseOption(options.shadow.bias,1e-4),options.shadow.mapSize=this.parseOption(options.shadow.mapSize,{}),spotLight.shadow.mapSize.width=this.parseOption(options.shadow.mapSize.width,1024),spotLight.shadow.mapSize.height=this.parseOption(options.shadow.mapSize.height,1024),options.shadow.camera=this.parseOption(options.shadow.camera,{}),spotLight.shadow.camera.visible=this.parseOption(options.shadow.camera.visible,!0),spotLight.shadow.camera.Fov=this.parseOption(options.shadow.camera.Fov,90),spotLight.shadow.camera.near=this.parseOption(options.shadow.camera.near,.5),spotLight.shadow.camera.far=this.parseOption(options.shadow.camera.far,1e3),spotLight}createSpotLightHelper(spotLight,options){const spotLightHelper=new THREE.SpotLightHelper(spotLight,this.parseOption(options.color,spotLight.color));return spotLightHelper.name=spotLight.name+"-Helper",spotLightHelper}addDirectionalLight(options){options=options||{};const directionalLight=this.createDirectionalLight(options);if(this.graphics.scene.add(directionalLight),options.useHelper){const directionalLightHelper=this.createDirectionalLightHelper(directionalLight,{});this.graphics.scene.add(directionalLightHelper);const helper=new THREE.CameraHelper(directionalLight.shadow.camera);this.graphics.scene.add(helper)}return this.graphics.directionalLights.push(directionalLight),directionalLight}createDirectionalLight(options){options=options||{};const directionalLight=new THREE.DirectionalLight(this.parseOption(options.color,16777215));return directionalLight.name=this.parseOption(options.name,this.generateLightName("DirectionalLight")),directionalLight.position.copy(this.parseOption(options.position,new THREE.Vector3(5,50,5))),directionalLight.intensity=this.parseOption(options.intensity,1),directionalLight.castShadow=this.parseOption(options.castShadow,!0),options.shadow=this.parseOption(options.shadow,{}),directionalLight.shadow.bias=this.parseOption(options.shadow.bias,0),options.shadow.mapSize=this.parseOption(options.shadow.mapSize,{}),directionalLight.shadow.mapSize.width=this.parseOption(options.shadow.mapSize.width,1024),directionalLight.shadow.mapSize.height=this.parseOption(options.shadow.mapSize.height,1024),options.shadow.camera=this.parseOption(options.shadow.camera,{}),directionalLight.shadow.camera.visible=this.parseOption(options.shadow.camera.visible,!0),directionalLight.shadow.camera.near=this.parseOption(options.shadow.camera.near,.5),directionalLight.shadow.camera.far=this.parseOption(options.shadow.camera.far,1e3),directionalLight.shadow.camera.top=this.parseOption(options.shadow.camera.top,10),directionalLight.shadow.camera.bottom=this.parseOption(options.shadow.camera.bottom,-10),directionalLight.shadow.camera.right=this.parseOption(options.shadow.camera.right,10),directionalLight.shadow.camera.left=this.parseOption(options.shadow.camera.left,-10),directionalLight}createDirectionalLightHelper(directionalLight,options){const directionalLightHelper=new THREE.DirectionalLightHelper(directionalLight,this.parseOption(options.size,1),this.parseOption(options.color,directionalLight.color));return directionalLightHelper.name=directionalLight.name+"-Helper",directionalLightHelper}parseOption(opt,def){return null==opt?def:opt}generateLightName(prefix){return prefix+"-"+Math.floor(1e6*Math.random())}}class MeshUtils{constructor(graphics){this.graphics=graphics,this.BODY_SCALE=2}createBox(properties,mateirial){properties=properties||{};const boxGeometry=new THREE.BoxBufferGeometry(this.parseOption(properties.width,1)*this.BODY_SCALE,this.parseOption(properties.height,1)*this.BODY_SCALE,this.parseOption(properties.depth,1)*this.BODY_SCALE,this.parseOption(properties.widthSegments,1),this.parseOption(properties.heightSegments,1),this.parseOption(properties.depthSegments,1)),boxMaterial=this.parseOption(mateirial,new THREE.MeshPhongMaterial({color:this.parseOption(properties.color,3377203)})),boxMesh=new THREE.Mesh(boxGeometry,boxMaterial);return boxMesh.name=this.parseOption(properties.name,this.generateMeshName("Box")),boxMesh.castShadow=!0,boxMesh.receiveShadow=!0,boxMesh}addBox(properties,mateirial){const boxMesh=this.createBox(properties,mateirial);return this.setLocationFromProperties(boxMesh,properties),this.setRotationFromProperties(boxMesh,properties),this.graphics.scene.add(boxMesh),boxMesh}generateMeshName(prefix){return prefix+"-"+Math.floor(1e6*Math.random())}createSphere(properties,mateirial){properties=properties||{};const sphereGeometry=new THREE.SphereBufferGeometry(this.parseOption(properties.radius,1),this.parseOption(properties.widthSegments,16),this.parseOption(properties.heightSegments,16),this.parseOption(properties.phiStart,0),this.parseOption(properties.phiLength,2*Math.PI),this.parseOption(properties.thetaStart,0),this.parseOption(properties.thetaLength,Math.PI)),sphereMaterial=this.parseOption(mateirial,new THREE.MeshPhongMaterial({color:this.parseOption(properties.color,8926003)})),sphereMesh=new THREE.Mesh(sphereGeometry,sphereMaterial);return sphereMesh.castShadow=!0,sphereMesh.name=this.parseOption(properties.name,this.generateMeshName("Sphere")),sphereMesh.receiveShadow=!0,sphereMesh}addSphere(properties,mateirial){const sphereMesh=this.createSphere(properties,mateirial);return this.graphics.scene.add(sphereMesh),this.setLocationFromProperties(sphereMesh,properties),this.setRotationFromProperties(sphereMesh,properties),sphereMesh}createCylinder(properties,mateirial){properties=properties||{};const cylinderGeometry=new THREE.CylinderBufferGeometry(this.parseOption(properties.radiusTop,1),this.parseOption(properties.radiusBottom,1),this.parseOption(properties.height,1)*this.BODY_SCALE,this.parseOption(properties.radialSegments,16),this.parseOption(properties.heightSegments,1),this.parseOption(properties.openEnded,!1),this.parseOption(properties.thetaStart,0),this.parseOption(properties.thetaLength,2*Math.PI)),cylinderMaterial=this.parseOption(mateirial,new THREE.MeshPhongMaterial({color:this.parseOption(properties.color,3355528)})),cylinderMesh=new THREE.Mesh(cylinderGeometry,cylinderMaterial);return cylinderMesh.castShadow=!0,cylinderMesh.receiveShadow=!0,cylinderMesh.name=this.parseOption(properties.name,this.generateMeshName("Cylinder")),cylinderMesh}addCylinder(properties,mateirial){const cylinderMesh=this.createCylinder(properties,mateirial);return this.graphics.scene.add(cylinderMesh),this.setLocationFromProperties(cylinderMesh,properties),this.setRotationFromProperties(cylinderMesh,properties),cylinderMesh}createIcosahedron(properties,mateirial){properties=properties||{};const icosahedronGeometry=new THREE.IcosahedronBufferGeometry(this.parseOption(properties.radius,1),this.parseOption(properties.detail,0)),icosahedronMaterial=this.parseOption(mateirial,new THREE.MeshPhongMaterial({color:this.parseOption(properties.color,8926088)})),icosahedronMesh=new THREE.Mesh(icosahedronGeometry,icosahedronMaterial);return icosahedronMesh.castShadow=!0,icosahedronMesh.receiveShadow=!0,icosahedronMesh.name=this.parseOption(properties.name,this.generateMeshName("Icosahedron")),icosahedronMesh}addIcosahedron(properties,mateirial){const icosahedronMesh=this.createIcosahedron(properties,mateirial);return this.graphics.scene.add(icosahedronMesh),this.setLocationFromProperties(icosahedronMesh,properties),this.setRotationFromProperties(icosahedronMesh,properties),icosahedronMesh}createCone(properties,mateirial){properties=properties||{};const coneGeometry=new THREE.ConeBufferGeometry(this.parseOption(properties.radius,1),this.parseOption(properties.height,1)*this.BODY_SCALE,this.parseOption(properties.radialSegments,16),this.parseOption(properties.heightSegments,1),this.parseOption(properties.openEnded,!1),this.parseOption(properties.thetaStart,0),this.parseOption(properties.thetaLength,2*Math.PI)),coneMaterial=this.parseOption(mateirial,new THREE.MeshPhongMaterial({color:this.parseOption(properties.color,8947763)})),coneMesh=new THREE.Mesh(coneGeometry,coneMaterial);return coneMesh.castShadow=!0,coneMesh.receiveShadow=!0,coneMesh.name=this.parseOption(properties.name,this.generateMeshName("Cone")),coneMesh}addCone(properties,mateirial){const coneMesh=this.createCone(properties,mateirial);return this.graphics.scene.add(coneMesh),this.setLocationFromProperties(coneMesh,properties),this.setRotationFromProperties(coneMesh,properties),coneMesh}createTorus(properties,mateirial){properties=properties||{};const torusGeometry=new THREE.TorusBufferGeometry(this.parseOption(properties.radius,1),this.parseOption(properties.tube,.4),this.parseOption(properties.radialSegments,16),this.parseOption(properties.tubularSegments,16),this.parseOption(properties.arc,2*Math.PI)),torusMaterial=this.parseOption(mateirial,new THREE.MeshPhongMaterial({color:this.parseOption(properties.color,8947763)})),torusMesh=new THREE.Mesh(torusGeometry,torusMaterial);return torusMesh.castShadow=!0,torusMesh.receiveShadow=!0,torusMesh.name=this.parseOption(properties.name,this.generateMeshName("Torus")),torusMesh}addTorus(properties,mateirial){const torusMesh=this.createTorus(properties,mateirial);return this.graphics.scene.add(torusMesh),this.setLocationFromProperties(torusMesh,properties),this.setRotationFromProperties(torusMesh,properties),torusMesh}createTorusKnot(properties,mateirial){properties=properties||{};const torusKnotGeometry=new THREE.TorusKnotBufferGeometry(this.parseOption(properties.radius,1),this.parseOption(properties.tube,.4),this.parseOption(properties.tubularSegments,64),this.parseOption(properties.radialSegments,8),this.parseOption(properties.p,2),this.parseOption(properties.q,3)),torusKnotMaterial=this.parseOption(mateirial,new THREE.MeshPhongMaterial({color:this.parseOption(properties.color,8947763)})),torusKnotMesh=new THREE.Mesh(torusKnotGeometry,torusKnotMaterial);return torusKnotMesh.castShadow=!0,torusKnotMesh.receiveShadow=!0,torusKnotMesh.name=this.parseOption(properties.name,this.generateMeshName("TorusKnot")),torusKnotMesh}addTorusKnot(properties,mateirial){const torusKnotMesh=this.createTorusKnot(properties,mateirial);return this.graphics.scene.add(torusKnotMesh),this.setLocationFromProperties(torusKnotMesh,properties),this.setRotationFromProperties(torusKnotMesh,properties),torusKnotMesh}createPlane(properties,mateirial){properties=properties||{};const planeGeometry=new THREE.PlaneBufferGeometry(this.parseOption(properties.width,1),this.parseOption(properties.height,1),this.parseOption(properties.widthSegments,1),this.parseOption(properties.heightSegments,1)),planeMaterial=this.parseOption(mateirial,new THREE.MeshPhongMaterial({color:this.parseOption(properties.color,8947848)})),planeMesh=new THREE.Mesh(planeGeometry,planeMaterial);return planeMesh.castShadow=!0,planeMesh.receiveShadow=!0,planeMesh.name=this.parseOption(properties.name,this.generateMeshName("Plane")),planeMesh}addPlane(properties,mateirial){const planeMesh=this.createPlane(properties,mateirial);return this.graphics.scene.add(planeMesh),this.setLocationFromProperties(planeMesh,properties),this.setRotationFromProperties(planeMesh,properties),planeMesh}applyReflectionMapToAllMeshes(cubeTexture){this.graphics.scene.traverse(child=>{child instanceof THREE.Mesh&&(child.name.includes("Helper")||child.name.includes(this.graphics.getGroundPlaneName())||child.name.includes("___mesh_debug___")||(child.material.envMap=cubeTexture,child.material.needsUpdate=!0))})}removeReflectionMapFromAllMeshes(){this.applyReflectionMapToAllMeshes(void 0)}applyReflectionMapToMesh(meshOrGroup,cubeTexture){meshOrGroup.traverse(child=>{child instanceof THREE.Mesh&&(child.name.includes("Helper")||(child.material.envMap=cubeTexture,child.material.needsUpdate=!0))})}removeReflectionMapFromMesh(meshOrGroup){this.applyReflectionMapToMesh(meshOrGroup,void 0)}getAllMeshes(){const meshes=[];return this.graphics.scene.traverse(function(mesh){(mesh instanceof THREE.Mesh||mesh instanceof THREE.Group)&&mesh.parent instanceof THREE.Scene&&meshes.push(mesh)}),meshes}getMeshesFromScene(scene){const _scene=scene||this.graphics.scene,meshes=[];return _scene.traverse(c=>{c instanceof THREE.Mesh&&c.name&&meshes.push(c)}),meshes}getMeshByName(name){const meshes=this.getAllMeshes();for(var i=0;i<meshes.length;i++)if(meshes[i].name===name)return meshes[i]}addAxesToMesh(mesh,size){if(mesh.children){var added=!1;for(let i=0;i<mesh.children.length;i++)if(mesh.children[i]instanceof THREE.LineSegments){added=!0;break}if(!added){var scale=size;scale||(scale=(scale=mesh.scale.x>mesh.scale.y?mesh.scale.x:mesh.scale.y)>mesh.scale.z?scale:mesh.scale.z);var axes=new THREE.AxesHelper(this.parseOption(size,1));mesh.add(axes)}return this}}removeAxesFromMesh(mesh){var axes=void 0;for(let i=0;i<mesh.children.length;i++)if(mesh.children[i]instanceof THREE.LineSegments){axes=mesh.children[i];break}return axes&&mesh.remove(axes),this}addAxesToAllMeshes(size){const self=this;return this.graphics.scene.traverse(mesh=>{mesh instanceof THREE.Mesh&&self.addAxesToMesh(mesh,self.parseOption(size,1))}),this}removeAxesFromAllMeshes(){const self=this;return this.graphics.scene.traverse(mesh=>{mesh instanceof THREE.Mesh&&self.removeAxesFromMesh(mesh)}),this}parseOption(opt,def){return null==opt?def:opt}setLocationFromProperties(mesh,properties){return properties.position=properties.position||{},mesh.position.set(this.parseOption(properties.position.x,0),this.parseOption(properties.position.y,1),this.parseOption(properties.position.z,0)),this}setRotationFromProperties(mesh,properties){return properties.rotation=properties.rotation||{},mesh.rotation.set(this.parseOption(properties.rotation.x,0),this.parseOption(properties.rotation.y,0),this.parseOption(properties.rotation.z,0)),this}print(message,typeColor){var color="#000000";switch(typeColor){case"info":color="#3333AA";break;case"success":color="#33AA33";break;case"danger":color="#AA3333";break;case"warning":color="#AAAA33";break;case"primary":color="#333388";break;default:color=typeColor}return console.log("%c"+message,"color:"+color),this}analiseMeshes(meshes){var color="#33aa33",count=0;console.group("%cMeshUtils.analiseMeshes()","color:"+color),meshes||(meshes=this.getAllMeshes()),meshes.forEach(mesh=>{if((mesh instanceof THREE.Mesh||mesh instanceof THREE.Group)&&mesh.parent instanceof THREE.Scene){"Mesh"==mesh.type?color=mesh.name.includes("Helper")?"#888888":"#338833":"Group"==mesh.type&&(color="#3333aa"),console.log("%c"+ ++count+") "+mesh.type+": "+mesh.name+", #children: "+mesh.children.length,"color:"+color);var numc=0;mesh.children.forEach(c=>{console.log("%c   "+count+"."+ ++numc+") "+c.type+": "+c.name+", #children: "+c.children.length,"color:#555588");var subc=0;c.children.forEach(cc=>{console.log("%c        "+count+"."+numc+"."+ ++subc+") "+cc.type+": "+cc.name+", #children: "+cc.children.length,"color:#666699")})})}}),console.groupEnd()}}class Loader{constructor(options){this.options=options||{}}loadGLTF(path,callback){return new Promise((resolve,reject)=>{const loader=new GLTFLoader;loader.crossOrigin="anonymous",loader.load(path,gltf=>{gltf.scene.traverse(child=>{child instanceof THREE.Mesh&&(child.receiveShadow=!0,child.castShadow=!0),(child instanceof THREE.Mesh||child instanceof THREE.Group)&&child.name.toLowerCase().includes("collider")&&(child.visible=!1)}),resolve(gltf),callback&&callback(gltf)},xhr=>{},err=>{reject("Error: The GLTF model "+path+" cannot be downloaded!")})})}loadCubeTexture(path){return new Promise((resolve,reject)=>{path||resolve(void 0),path+="/"!==path[path.length-1]?"/":"";const loader=(new THREE.CubeTextureLoader).setPath(path);loader.crossOrigin="anonymous";loader.load(["posx.jpg","negx.jpg","posy.jpg","negy.jpg","posz.jpg","negz.jpg"],cubeTexture=>{cubeTexture.format=THREE.RGBAFormat,resolve(cubeTexture)},xhr=>{},err=>{reject("Error: The CubeTexture "+path+" cannot be downloaded!")})})}}class HelperUtils$1{constructor(graphics){this.graphics=graphics}addGrids(options){options=options||{};const gridHelper=new THREE.GridHelper(this.parseOption(options.size,40),this.parseOption(options.divisions,40),this.parseOption(options.colorCenterLine,2105376),this.parseOption(options.colorGrid,1381653));gridHelper.name="MainGridHelper",gridHelper.opacity=this.parseOption(options.opacity,.5),gridHelper.material.transparent=gridHelper.opacity<1,options.position=options.position||{},gridHelper.position.x=this.parseOption(options.position.x,0),gridHelper.position.y=this.parseOption(options.position.y,.001),gridHelper.position.z=this.parseOption(options.position.z,0),this.graphics.scene.add(gridHelper)}addAxes(options){options=options||{};const axesHelper=new THREE.AxesHelper(this.parseOption(options.size,2));axesHelper.name="MainAxesHelper",options.position=options.position||{},axesHelper.position.x=this.parseOption(options.position.x,0),axesHelper.position.y=this.parseOption(options.position.y,.002),axesHelper.position.z=this.parseOption(options.position.z,0),this.graphics.scene.add(axesHelper)}parseOption(opt,def){return null==opt?def:opt}}class MaterialUtils{constructor(graphics){this.graphics=graphics}enableTransparent(mesh){mesh.material.alphaTest=.5,mesh.material.side=THREE.DoubleSide,mesh.material.transparent=!0,mesh.material.opacity=1,mesh.material.needsUpdate=!0}disableTransparent(mesh){mesh.material.alphaTest=0,mesh.material.side=THREE.DoubleSide,mesh.material.transparent=!1,mesh.material.opacity=0,mesh.material.needsUpdate=!0}changeToDoubleSide(material){return material.side=THREE.DoubleSide,material.needsUpdate,material}changeToFrontSide(material){return material.side=THREE.FrontSide,material.needsUpdate,material}changeToBackSideSide(material){return material.side=THREE.BackSide,material.needsUpdate,material}changeAlphaTestValue(material,value){return material.alphaTest=value,material.needsUpdate,material}changeAlphaValue(material,value){return material.alpha=value,material.needsUpdate,material}}class LabelRenderer{static get NAME_PREFIX(){return"__mesh_label__"}static get LABEL_CLASS(){return"object_label"}constructor(graphics){this.graphics=graphics,this.labels=[],this.initLabelRender()}initLabelRender(){this.renderer=new threeCss2drender.CSS2DRenderer,this.renderer.setSize(window.innerWidth,window.innerHeight),this.renderer.domElement.style.position="absolute",this.renderer.domElement.style.top="0",this.renderer.domElement.style.pointerEvents="none",this.renderer.domElement.style.position="absolute",document.body.appendChild(this.renderer.domElement)}getMeshLabel(mesh){const NAME=LabelRenderer.NAME_PREFIX+mesh.name;for(var i=0;i<mesh.children.length;i++)if(mesh.children[i].name===NAME)return mesh.children[i]}addMeshLabel(mesh,desiredName){if(this.getMeshLabel(mesh))return;const NAME=LabelRenderer.NAME_PREFIX+mesh.name;var text=document.createElement("div");text.className=LabelRenderer.LABEL_CLASS,text.textContent=desiredName||mesh.name,text.textContent=""===text.textContent?"No Name":text.textContent;var label=new threeCss2drender.CSS2DObject(text);return label.name=NAME,label.position.copy(new THREE.Vector3(0,1.5,0)),mesh.add(label),this.labels.push(label),label}removeMeshLabel(mesh){const label=this.getMeshLabel(mesh);if(!label)return;mesh.remove(label);const NAME=LabelRenderer.NAME_PREFIX+mesh.name,lbls=[];for(var i=0;i<this.labels.length;i++)this.labels[i].name!=NAME&&lbls.push(this.labels[i]);return this.labels=lbls,this.labels}getMeshes(){const meshes=[];return this.graphics.scene.children[0].traverse(function(c){(c instanceof THREE.Mesh||c instanceof THREE.Group)&&c.parent instanceof THREE.Scene&&meshes.push(c)}),meshes}addMeshLabelToMeshes(){const meshes=this.getMeshes();for(var i=0;i<meshes.length;i++)this.addMeshLabel(meshes[i]);return meshes}removeMeshLabelFromMeshes(){const meshes=this.getMeshes();for(var i=0;i<meshes.length;i++)this.removeMeshLabel(meshes[i]);return meshes}updateMeshLabel(mesh,text){const label=this.getMeshLabel(mesh);if(label)return label.element.innerHTML=text,label;this._print_label_not_found(mesh)}setMeshLabelClass(mesh,className){const label=this.getMeshLabel(mesh);if(label)return label.element.className=className,label;this._print_label_not_found(mesh)}addMeshLabelClass(mesh,className){const label=this.getMeshLabel(mesh);if(label)return label.element.classList.add(className),label;this._print_label_not_found(mesh)}setMeshLabelPosition(mesh,position){const label=this.getMeshLabel(mesh);if(label)return label.position.copy(position),label;this._print_label_not_found(mesh)}_print_label_not_found(mesh){}}class Utils{constructor(){}static print(message,typeColor){var color="#000000";switch(typeColor){case"info":color="#3333AA";break;case"success":color="#33AA33";break;case"danger":color="#AA3333";break;case"warning":color="#AAAA33";break;case"primary":color="#333388";break;default:color=typeColor}return console.log("%c"+message,"color:"+color),this}static printInfo(message){this.print(message,"info")}static printWarning(message){this.print(message,"warning")}static printSuccess(message){this.print(message,"success")}static printDanger(message){this.print(message,"danger")}static printPrimary(message){this.print(message,"primary")}}Utils.printSuccess("Graphics Engine v0.5 (22 Feb, 2019) loaded");class Graphics{constructor(options){this.options=void 0===options?{}:options,this.meshUtils=new MeshUtils(this),this.lightUtils=new HelperUtils(this),this.loaderUtils=new Loader(this),this.helperUtils=new HelperUtils$1(this),this.materialUtils=new MaterialUtils(this),this.labelRenderer=new LabelRenderer(this),this.stats=[],this.ambientLights=[],this.pointLights=[],this.spotLights=[],this.directionalLights=[],this.cameras=[]}init(){return this.options.renderer=this.parseOption(this.options.renderer,{}),this.options.renderer.shadowMap=this.parseOption(this.options.renderer.shadowMap,{}),this.renderer=new THREE.WebGLRenderer({antialias:this.parseOption(this.options.renderer.antialias,!1),alpha:this.parseOption(this.options.renderer.alpha,!1)}),this.renderer.setSize(window.innerWidth,window.innerHeight),this.renderer.setPixelRatio(window.devicePixelRatio),this.renderer.gammaInput=this.parseOption(this.options.renderer.gammaInput,!1),this.renderer.gammaOutput=this.parseOption(this.options.renderer.gammaOutput,!1),this.renderer.shadowMap.enabled=this.parseOption(this.options.renderer.shadowMap.enabled,!0),this.renderer.shadowMap.soft=this.parseOption(this.options.renderer.shadowMap.soft,!1),this.renderer.shadowMap.type=this.parseOption(this.options.renderer.shadowMap.type,THREE.PCFSoftShadowMap),document.body.appendChild(this.renderer.domElement),this.scene=new THREE.Scene,this.options.camera=this.parseOption(this.options.camera,{}),this.camera=new THREE.PerspectiveCamera(this.options.camera.fov,window.innerWidth/window.innerHeight,this.options.camera.near,this.options.camera.far),this.camera.position.x=this.options.camera.position.x,this.camera.position.y=this.options.camera.position.y,this.camera.position.z=this.options.camera.position.z,this.camera.lookAt(new THREE.Vector3(0,0,0)),this.cameras.push(this.camera),this.controls=new OrbitControls(this.camera),this.controls.enabled=this.parseOption(this.options.controls.enabled,!0),this.options.controls.useKeys=this.parseOption(this.options.controls.useKeys,!1),this.options.controls.useKeys||(this.controls.keys={}),window.addEventListener("resize",function(){this.camera.aspect=window.innerWidth/window.innerHeight,this.camera.updateProjectionMatrix(),this.renderer.setSize(window.innerWidth,window.innerHeight),this.labelRenderer.renderer.setSize(window.innerWidth,window.innerHeight)}.bind(this),!1),this.addStats(),this}addStats(options){options=options||{};const stats=new Stats;stats.showPanel(this.parseOption(options.type,0)),document.body.appendChild(stats.dom);const left=this.parseOption(options.left,0),top=this.parseOption(options.top,0);return stats.dom.style.cssText="position:absolute;left:"+left+"px;top:"+top+"px;cursor:pointer;opacity:0.5;z-index:10000",this.stats.push(stats),this}getGroundPlaneName(){return"SceneGroundNoPhysics"}getGroundPlane(){return this.meshUtils.getMeshByName(this.getGroundPlaneName())}addGroundPlane(options){if(this.getGroundPlane())return;options=options||{};const groundPlaneMesh=new THREE.Mesh(new THREE.PlaneBufferGeometry(1500,1500),new THREE.MeshBasicMaterial({color:this.parseOption(options.color,1052688),depthWrite:!1}));return groundPlaneMesh.name=this.getGroundPlaneName(),groundPlaneMesh.rotation.x=-Math.PI/2,groundPlaneMesh.position.y=-.05,groundPlaneMesh.receiveShadow=!1,this.scene.add(groundPlaneMesh),this}removeGroundPlane(){return this.scene.remove(this.getGroundPlane()),this}setSceneType(sceneType,options){if(options=options||{},"fog"==sceneType)options.fog=this.parseOption(options.fog,{}),this.scene.fog||(this.scene.fog=new THREE.Fog(this.parseOption(options.fog.color,13421772)),this.scene.fog.name=this.parseOption(options.fog.name,"__Fog__"),this.scene.background=this.scene.fog.color),this.scene.fog.near=this.parseOption(options.fog.near,5),this.scene.fog.far=this.parseOption(options.fog.far,100),this.scene.background=this.scene.fog.color,this.addGroundPlane();else if("env"===sceneType){options.env=this.parseOption(options.env,{});var applied=!1;options.env.cubeTexture&&options.env.cubeTexture instanceof THREE.CubeTexture&&(this.scene.background=options.env.cubeTexture,applied=!0),applied||this.loaderUtils.loadCubeTexture(this.parseOption(options.env.path,"NO_ENV_PATH_FILE!")).then(cubeTexture=>{this.scene.background=cubeTexture})}else options.bkg=this.parseOption(options.bkg,{}),this.scene.background=new THREE.Color(this.parseOption(options.bkg.color,1118481));this.parseOption(options.usePlane,void 0)?this.addGroundPlane():"fog"!==this.options.sceneType&&this.removeGroundPlane(),"fog"!==sceneType&&this.scene.fog&&(this.scene.fog.near=.1,this.scene.fog.far=0)}setEnvMap(path){if(path instanceof THREE.CubeTexture){var cubeTexture=path;this.meshUtils.applyReflectionMapToAllMeshes(cubeTexture),this.scene.background=cubeTexture}else this.loaderUtils.loadCubeTexture(path).then(cubeTexture=>{this.meshUtils.applyReflectionMapToAllMeshes(cubeTexture),this.scene.background=cubeTexture})}update(){return this.controls.update(),this.stats.forEach(stats=>{stats.update()}),this.renderer.render(this.scene,this.camera),this.labelRenderer.labels.length>0&&this.labelRenderer.renderer.render(this.scene,this.camera),this}parseOption(opt,def){return null==opt?def:opt}}class RayCast{constructor(graphics,physics){this.graphics=graphics,this.physics=physics,this.callback=null,this.meshes=[],this.raycaster=new THREE.Raycaster,this.mousePosition=new THREE.Vector2,window.addEventListener("mousemove",function(event){this.mousePosition.x=+event.clientX/this.graphics.renderer.domElement.clientWidth*2-1,this.mousePosition.y=-event.clientY/this.graphics.renderer.domElement.clientHeight*2+1}.bind(this),!1)}doRaycast(){this.meshes.length<1&&(this.meshes=this.getMeshesFromScene());var targets=[];if(this.meshes.length>1){this.raycaster.setFromCamera(this.mousePosition,this.graphics.camera);let intersects=this.raycaster.intersectObjects(this.meshes);for(let i=0;i<intersects.length;i++){const obj=intersects[i].object;obj.name.includes("___mesh_debug___")||(obj.parent instanceof THREE.Group?targets.push({mesh:obj.parent,intersect:intersects[i],ray:this.raycaster.ray}):targets.push({mesh:obj,intersect:intersects[i],ray:this.raycaster.ray}))}}return targets}updateScene(){this.meshes=getMeshesFromScene()}getMeshesFromScene(scene){const _scene=scene||this.graphics.scene,meshes=this.meshes;return _scene.traverse(c=>{c instanceof THREE.Mesh&&c.name&&meshes.push(c)}),this.meshes}getMeshesFromWorld(world){const _world=world||this.physics.world,meshes=this.meshes;return _world.bodies.forEach(body=>{body.threemesh.traverse(c=>{c instanceof THREE.Mesh&&c.name&&meshes.push(c)})}),this.meshes}}class Debugger{constructor(scene,world,options){options=options||{},this.scene=scene,this.world=world,this.visibled=!0,this._meshes=[],this._material=new THREE.MeshBasicMaterial({color:options.color||13421568,wireframe:!0}),this._sphereGeometry=new THREE.SphereGeometry(1),this._boxGeometry=new THREE.BoxGeometry(1,1,1),this._planeGeometry=new THREE.PlaneGeometry(10,10,10,10),this._cylinderGeometry=new THREE.CylinderGeometry(1,1,10,10),this.tmpVec0=new CANNON.Vec3,this.tmpVec1=new CANNON.Vec3,this.tmpVec2=new CANNON.Vec3,this.tmpQuat0=new CANNON.Vec3}update(){for(var bodies=this.world.bodies,meshes=this._meshes,shapeWorldPosition=this.tmpVec0,shapeWorldQuaternion=this.tmpQuat0,meshIndex=0,i=0;i!==bodies.length;i++)for(var body=bodies[i],j=0;j!==body.shapes.length;j++){var shape=body.shapes[j];this._updateMesh(meshIndex,shape),(mesh=meshes[meshIndex])&&(body.quaternion.vmult(body.shapeOffsets[j],shapeWorldPosition),body.position.vadd(shapeWorldPosition,shapeWorldPosition),body.quaternion.mult(body.shapeOrientations[j],shapeWorldQuaternion),mesh.position.copy(shapeWorldPosition),mesh.quaternion.copy(shapeWorldQuaternion)),meshIndex++}for(i=meshIndex;i<meshes.length;i++){var mesh;(mesh=meshes[i])&&this.scene.remove(mesh)}return meshes.length=meshIndex,this}_updateMesh(index,shape){var mesh=this._meshes[index];this._typeMatch(mesh,shape)||(mesh&&this.scene.remove(mesh),mesh=this._meshes[index]=this._createMesh(shape)),this._scaleMesh(mesh,shape)}_typeMatch(mesh,shape){if(!mesh)return!1;var geo=mesh.geometry;return geo instanceof THREE.SphereGeometry&&shape instanceof CANNON.Sphere||geo instanceof THREE.BoxGeometry&&shape instanceof CANNON.Box||geo instanceof THREE.PlaneGeometry&&shape instanceof CANNON.Plane||geo.id===shape.geometryId&&shape instanceof CANNON.ConvexPolyhedron||geo.id===shape.geometryId&&shape instanceof CANNON.Trimesh||geo.id===shape.geometryId&&shape instanceof CANNON.Heightfield}_createMesh(shape){var mesh,material=this._material;switch(shape.type){case CANNON.Shape.types.SPHERE:mesh=new THREE.Mesh(this._sphereGeometry,material);break;case CANNON.Shape.types.BOX:mesh=new THREE.Mesh(this._boxGeometry,material);break;case CANNON.Shape.types.PLANE:mesh=new THREE.Mesh(this._planeGeometry,material);break;case CANNON.Shape.types.CONVEXPOLYHEDRON:for(var geo=new THREE.Geometry,i=0;i<shape.vertices.length;i++){var v=shape.vertices[i];geo.vertices.push(new THREE.Vector3(v.x,v.y,v.z))}for(i=0;i<shape.faces.length;i++)for(var face=shape.faces[i],a=face[0],j=1;j<face.length-1;j++){var b=face[j],c=face[j+1];geo.faces.push(new THREE.Face3(a,b,c))}geo.computeBoundingSphere(),geo.computeFaceNormals(),mesh=new THREE.Mesh(geo,material),shape.geometryId=geo.id;break;case CANNON.Shape.types.TRIMESH:var geometry=new THREE.Geometry,v0=this.tmpVec0,v1=this.tmpVec1,v2=this.tmpVec2;for(i=0;i<shape.indices.length/3;i++){shape.getTriangleVertices(i,v0,v1,v2),geometry.vertices.push(new THREE.Vector3(v0.x,v0.y,v0.z),new THREE.Vector3(v1.x,v1.y,v1.z),new THREE.Vector3(v2.x,v2.y,v2.z));j=geometry.vertices.length-3;geometry.faces.push(new THREE.Face3(j,j+1,j+2))}geometry.computeBoundingSphere(),geometry.computeFaceNormals(),mesh=new THREE.Mesh(geometry,material),shape.geometryId=geometry.id;break;case CANNON.Shape.types.HEIGHTFIELD:geometry=new THREE.Geometry,v0=this.tmpVec0,v1=this.tmpVec1,v2=this.tmpVec2;for(var xi=0;xi<shape.data.length-1;xi++)for(var yi=0;yi<shape.data[xi].length-1;yi++)for(var k=0;k<2;k++){shape.getConvexTrianglePillar(xi,yi,0===k),v0.copy(shape.pillarConvex.vertices[0]),v1.copy(shape.pillarConvex.vertices[1]),v2.copy(shape.pillarConvex.vertices[2]),v0.vadd(shape.pillarOffset,v0),v1.vadd(shape.pillarOffset,v1),v2.vadd(shape.pillarOffset,v2),geometry.vertices.push(new THREE.Vector3(v0.x,v0.y,v0.z),new THREE.Vector3(v1.x,v1.y,v1.z),new THREE.Vector3(v2.x,v2.y,v2.z));i=geometry.vertices.length-3;geometry.faces.push(new THREE.Face3(i,i+1,i+2))}geometry.computeBoundingSphere(),geometry.computeFaceNormals(),mesh=new THREE.Mesh(geometry,material),shape.geometryId=geometry.id}return mesh&&(mesh.name="___mesh_debug___"+Math.floor(1e10*Math.random()),this.scene.add(mesh)),mesh}_scaleMesh(mesh,shape){switch(shape.type){case CANNON.Shape.types.SPHERE:var radius=shape.radius;mesh.scale.set(radius,radius,radius);break;case CANNON.Shape.types.BOX:mesh.scale.copy(shape.halfExtents),mesh.scale.multiplyScalar(2);break;case CANNON.Shape.types.CONVEXPOLYHEDRON:mesh.scale.set(1,1,1);break;case CANNON.Shape.types.TRIMESH:mesh.scale.copy(shape.scale);break;case CANNON.Shape.types.HEIGHTFIELD:mesh.scale.set(1,1,1)}}setVisible(visible){const self=this;this.visibled=!0===visible||!1===visible?visible:this.visibled,this.scene.traverse(mesh=>{mesh instanceof THREE.Mesh&&mesh.name.includes("___mesh_debug___")&&(mesh.visible=self.visibled)})}toggleVisible(){this.visibled=!this.visibled,this.setVisible(this.visibled)}}class BodyUtils{constructor(physics,options){options=options||{},this.physics=physics,this.bodyOffset=this.parseOption(options.bodyOffset,.01)}getBodyByMeshName(name){var targets=[],bodies=this.physics.world.bodies;for(let i=0;i<bodies.length;i++){const body=bodies[i];body.threemesh.name.toLowerCase()===name.toLowerCase()&&targets.push(body)}return targets.length>1&&console.warning("getBodyByMeshName: Found + "+targets.length+" bodies. Only the first body is returned"),targets[0]}getMeshesFromWorld(){const meshes=[];return this.physics.world.bodies.forEach(body=>{body.threemesh.traverse(c=>{c instanceof THREE.Mesh&&(c.parent instanceof THREE.Group?meshes.push(c.parent):meshes.push(c))})}),meshes}getBodiesFromWorld(){return this.physics.world.bodies}changeBodyToStatic(body){return body.type=CANNON.Body.STATIC,body.mass=0,body.updateMassProperties(),body.aabbNeedsUpdate=!0,body}changeBodyToDynamic(body,mass){return body.type=CANNON.Body.DYNAMIC,body.mass=mass||(mesh.scale.x+mesh.scale.y+mesh.scale.z)/3,body.updateMassProperties(),body.aabbNeedsUpdate=!0,body}changeMassOfBody(body,mass){}createBodiesFromScene(scene){console.group("%cCreate Bodies From Scene","color:#33AA33");const self=this;var body=void 0,created=!1,cnt=0;return scene.traverse(mesh=>{mesh instanceof THREE.Group?(body=self.createBodyFromMesh(mesh),created=!0):mesh instanceof THREE.Mesh&&mesh.parent instanceof THREE.Scene&&(body=self.createBodyFromMesh(mesh),created=!0),created&&(body&&(self.physics.world.add(body),console.log("%c"+ ++cnt+") Rigidbody of "+mesh.type+' "'+body.threemesh.name+'" is created',"color:#339922")),created=!1)}),console.groupEnd(),this}createBodyFromMesh(mesh){const name=mesh.name.toLowerCase(),mass=name.includes("static")?0:(mesh.scale.x+mesh.scale.y+mesh.scale.z)/3;return name.includes("cube")||name.includes("box")?this.createBoxBody(mesh,mass):name.includes("plane")?this.createPlaneBody(mesh,mass):name.includes("ball")||name.includes("sphere")||name.includes("icosphere")||name.includes("icosahedron")?this.createSphereBody(mesh,mass):name.includes("cylinder")?this.createCylinderBody(mesh,mass):name.includes("cone")?this.createConeBody(mesh,mass):name.includes("torus")?this.createTorusBody(mesh,mass):void 0}createShapeFromMesh(mesh){const name=mesh.name.toLowerCase();return name.includes("cube")||name.includes("box")?this.createBoxShape(mesh):name.includes("plane")?this.createPlaneShape(mesh):name.includes("ball")||name.includes("sphere")||name.includes("icosphere")||name.includes("icosahedron")?this.createSphereShape(mesh):name.includes("cylinder")?this.createCylinderShape(mesh):name.includes("cone")?this.createConeShape(mesh):name.includes("torus")?this.createTorusShape(mesh):void 0}createBoxShape(mesh){const factor=this.bodyOffset,halfExtents=new CANNON.Vec3(mesh.scale.x+factor,mesh.scale.y+factor,mesh.scale.z+factor);return new CANNON.Box(halfExtents)}createBoxBody(child,mass){const shape=this.createBoxShape(child),body=new CANNON.Body({mass:mass});return body.addShape(shape),body.quaternion.copy(child.quaternion),body.position.copy(child.position),body.threemesh=child,body}createPlaneShape(mesh){const factor=this.bodyOffset,halfExtents=new CANNON.Vec3(mesh.scale.x+factor,.05+factor,mesh.scale.z+factor);return new CANNON.Box(halfExtents)}createPlaneBody(child,mass){const shape=this.createPlaneShape(child),body=new CANNON.Body({mass:mass});return body.addShape(shape),body.quaternion.copy(child.quaternion),body.position.copy(child.position),body.threemesh=child,body}createSphereShape(mesh){const factor=this.bodyOffset,halfExtents=mesh.scale.x+3*factor;return new CANNON.Sphere(halfExtents)}createSphereBody(child,mass){const shape=this.createSphereShape(child),body=new CANNON.Body({mass:mass});return body.addShape(shape),body.quaternion.copy(child.quaternion),body.position.copy(child.position),body.threemesh=child,body}createCylinderShape(child){const factor=this.bodyOffset,radiusTop=child.scale.x,radiusBottom=radiusTop,height=2*child.scale.y,cylinderShape=new CANNON.Cylinder(radiusTop+factor,radiusBottom+factor,height+factor,16);var q=new CANNON.Quaternion;return q.setFromAxisAngle(new CANNON.Vec3(1,0,0),-Math.PI/2),cylinderShape.transformAllPoints(new CANNON.Vec3,q),cylinderShape}createCylinderBody(child,mass){const shape=this.createCylinderShape(child),body=new CANNON.Body({mass:mass});return body.addShape(shape),body.quaternion.copy(child.quaternion),body.position.copy(child.position),body.threemesh=child,body}createConeShape(child){const factor=this.bodyOffset,radiusBottom=child.scale.x,height=2*child.scale.y,coneShape=new CANNON.Cylinder(.001+factor,radiusBottom+factor,height+factor,16);var q=new CANNON.Quaternion;return q.setFromAxisAngle(new CANNON.Vec3(1,0,0),-Math.PI/2),coneShape.transformAllPoints(new CANNON.Vec3,q),coneShape}createConeBody(child,mass){const shape=this.createConeShape(child),body=new CANNON.Body({mass:mass});return body.addShape(shape),body.quaternion.copy(child.quaternion),body.position.copy(child.position),body.threemesh=child,body}createTorusShape(child){const factor=this.bodyOffset,radiusTop=1.25*child.scale.x,radiusBottom=radiusTop,height=.5*child.scale.y,torusShape=new CANNON.Cylinder(radiusTop+factor,radiusBottom+factor,height+factor,16);var q=new CANNON.Quaternion;return q.setFromAxisAngle(new CANNON.Vec3(1,0,0),-Math.PI/2),torusShape.transformAllPoints(new CANNON.Vec3,q),torusShape}createTorusBody(child,mass){const shape=this.createTorusShape(child),body=new CANNON.Body({mass:mass});return body.addShape(shape),body.quaternion.copy(child.quaternion),body.position.copy(child.position),body.threemesh=child,body}createGroundMaterial(friction,restitution){var groundMaterial=new CANNON.Material("__physicGroundMaterial"),groundContactMaterial=new CANNON.ContactMaterial(groundMaterial,groundMaterial,{friction:null!=friction?friction:.4,restitution:null!=restitution?restitution:0});return this.physics.world.addContactMaterial(groundContactMaterial),groundMaterial}createObjectMaterial(friction,restitution,groundMaterial){var objectMaterial=new CANNON.Material("__physicObjectMaterial"),objectContactMaterial=new CANNON.ContactMaterial(groundMaterial,objectMaterial,{friction:null!=friction?friction:0,restitution:null!=restitution?restitution:.9});return this.physics.world.addContactMaterial(objectContactMaterial),objectMaterial}parseOption(opt,def){return null==opt?def:opt}}Utils.printSuccess("Physics Engine  v0.5 (22 Feb, 2019) loaded");class Physics{constructor(graphics,options){this.graphics=graphics,this.debugRenderer=void 0,this.options=this.parseOption(options,{}),this.options.solver=this.parseOption(options.solver,{}),this.options.solver.iterations=this.parseOption(this.options.solver.iterations,10),this.options.solver.tolerance=this.parseOption(this.options.solver.tolerance,1e-6),this.options.useDebug=this.parseOption(options.useDebug,!0),this.options.debugColor=this.parseOption(options.debugColor,3407667),this.options.bodyOffset=this.parseOption(options.bodyOffset,.01),this.options.allowSleep=this.parseOption(options.allowSleep,!1),this.options.timeStep=this.parseOption(options.timeStep,"dt"),this.options.gravity=this.parseOption(options.gravity,new CANNON.Vec3(0,-9.8,0)),this.timeStep=this.options.timeStep,this.gravity=this.options.gravity,this.bodyUtils=new BodyUtils(this,this.options),this.enabled=!0}init(){this.world=new CANNON.World,this.world.gravity=this.gravity,this.world.broadphase=new CANNON.NaiveBroadphase,this.world.broadphase.useBoundingBoxes=!0,this.world.allowSleep=this.options.allowSleep,this.world.quatNormalizeFast=!0,this.world.quatNormalizeSkip=0,this.world.defaultContactMaterial.contactEquationStiffness=1e7,this.world.defaultContactMaterial.contactEquationRelaxation=5;const solver=new CANNON.GSSolver;return this.parseOption(this.options.solver.split,!0)?this.world.solver=new CANNON.SplitSolver(solver):this.world.solver=solver,this.world.solver.iterations=this.parseOption(this.options.solver.iterations,10),this.world.solver.tolerance=this.parseOption(this.options.solver.tolerance,1e-6),this.debugRenderer=new Debugger(this.graphics.scene,this.world,{color:this.options.debugColor}),this}update(dt){if(!1===this.enabled)return this;if(dt=void 0===dt?1/60:dt,"dt"===this.timeStep){var dts=dt/1e3;dts>.2&&(console.log("%cThe dt="+dts+" > 0.200 seconds. It is changed to "+(1/60).toFixed(2),"color:#885511"),dts=1/60),this.world.step(dts)}else this.world.step(this.timeStep);var removedBodies=[];if(this.world.bodies.forEach(body=>{null!=body.threemesh&&(body.threemesh.position.copy(body.position),body.threemesh.quaternion.copy(body.quaternion),body.position.y<-100&&removedBodies.push(body))}),this.options.useDebug&&this.debugRenderer.update(),removedBodies.length>0){for(var target_scene=null,i=0;i<this.graphics.scene.children.length;i++){var c=this.graphics.scene.children[i];if(c instanceof THREE.Scene){target_scene=c;break}}target_scene||(target_scene=this.graphics.scene),removedBodies.forEach(body=>{this.world.remove(body),target_scene.remove(body.threemesh),console.log("%cThe "+body.threemesh.name+" is removed","color:#883333")})}return this}start(){return this.enabled=!0,this}stop(){return this.enabled=!1,this}enebleProfiling(enebaled){return this.world.doProfiling=enebaled,this}getProfiling(){return this.world.profile}parseOption(opt,def){return null==opt?def:opt}generateMaterialName(prefix){return prefix+"-"+Math.floor(1e7*Math.random())}createMaterial(name){return new CANNON.Material(name||this.generateMaterialName("physicsMaterial"))}createContactMaterial(groundMaterial,bodyMaterial,options){return new CANNON.ContactMaterial(groundMaterial,bodyMaterial,{friction:this.parseOption(options.friction,.3),restitution:this.parseOption(options.restitution,.5),contactEquationStiffness:this.parseOption(options.contactEquationStiffness,1e8),contactEquationRelaxation:this.parseOption(options.contactEquationRelaxation,3),frictionEquationStiffness:this.parseOption(options.frictionEquationStiffness,1e8),frictionEquationRegularizationTime:this.parseOption(options.frictionEquationRegularizationTime||3)})}addContactMaterialToWorld(contactMaterial){this.world.addContactMaterial(contactMaterial)}createGroundMaterial(friction,restitution){const groundMaterial=new CANNON.Material(this.generateMaterialName("physicsMaterial")),contactMaterial=this.createContactMaterial(groundMaterial,groundMaterial,{friction:this.parseOption(friction,.3),restitution:this.parseOption(restitution,.5)});return this.world.addContactMaterial(contactMaterial),groundMaterial}createObjectMaterial(friction,restitution,groundMaterial){const objectMaterial=new CANNON.Material(this.generateMaterialName("physicsMaterial")),contactMaterial=this.createContactMaterial(groundMaterial,objectMaterial,{friction:this.parseOption(friction,.1),restitution:this.parseOption(restitution,.5)});return this.world.addContactMaterial(contactMaterial),objectMaterial}}class KeyEvent{constructor(key){this.down=!1,this.key=key,this.keyCode=void 0,this.target=void 0,this.shift=!1,this.ctrl=!1,this.alt=!1,this.repeat=!1,this.timeOld=performance.now(),this.timeNew=0,this.timeDif=0,this.timeSum=0}}class Keyboard{constructor(callback,options){this.options=options||{},this.downTicks=0,this.callback=callback||null,this.event=new KeyEvent(""),this.keyDownList=[],document.addEventListener("keydown",event=>{var added=!1;for(let i=0;i<this.keyDownList.length;i++)if(this.keyDownList[i].key===event.key){added=!0;break}if(!added){var keyEvt=new KeyEvent(event.key);_updateParams(keyEvt,event,!0),this.keyDownList.push(keyEvt)}this.callback&&(_updateParams(this.event,event,!0),this.callback(this.event))}),document.addEventListener("keyup",event=>{this.downTicks=0;var idx=-1;for(let i=0;i<this.keyDownList.length;i++)if(this.keyDownList[i].key===event.key){idx=i;break}idx>=0&&this.keyDownList.splice(idx,1),this.callback&&(_updateParams(this.event,event,!1),this.callback(this.event))})}setCallback(callback){this.callback=callback}getKeyDown(key,time){for(let i=0;i<this.keyDownList.length;i++){var keyEvt=this.keyDownList[i];if(keyEvt.key===key){if(0==this.downTicks)return this.downTicks++,!0;if(time){var holdDownTime=Number(performance.now()-keyEvt.timeNew);return Number(holdDownTime)>Number(time)&&(keyEvt.timeNew=performance.now(),!0)}return!0}}return!1}}function _updateParams(target,event,isDown){target.down=isDown,target.key=event.key,target.keyCode=event.keyCode,target.shift=event.shiftKey,target.ctrl=event.ctrlKey,target.alt=event.altKey,target.repeat=event.repeat,target.target=event.target,target.timeOld=target.timeNew,target.timeNew=performance.now(),target.timeDif=isDown?target.timeNew-target.timeOld:0,target.timeSum=isDown?target.timeSum+target.timeDif:0}class Mouse{constructor(option){this.normPosition=new THREE.Vector2,this.mousePosition=new THREE.Vector2,this.callbacks=[];const MOUSE_EVENTS=["mousemove","mousedown","mouseup"];for(var i=0;i<MOUSE_EVENTS.length;i++)window.addEventListener(MOUSE_EVENTS[i],function(event){this.updateMouse(event),this.executeCallbacks(event)}.bind(this),!1)}updateMouse(event){this.normPosition.x=+event.clientX/window.innerWidth*2-1,this.normPosition.y=-event.clientY/window.innerHeight*2+1,this.mousePosition.x=event.clientX,this.mousePosition.y=event.clientY}executeCallbacks(event){for(var i=0;i<this.callbacks.length;i++)this.callbacks[i].name===event.type&&this.callbacks[i].callback(event)}on(name,callback){this.callbacks.push({name:name,callback:callback})}}class AssetLoader{constructor(graphics,physics){this.graphics=graphics,this.physics=physics}load(model,callback){var self=this;return new Promise((resolve,reject)=>{console.group("%cAssetLoader.load","color:#22aa55");const loader=new GLTFLoader;loader.crossOrigin="anonymous",loader.load(model,gltf=>{Utils.print("The "+model+" is loaded","#22aa55");const colliders=[];var actor=void 0,cnt=0;console.group("%cProcessing Asset Model","color:#5588aa"),gltf.scene.traverse(child=>{(child instanceof THREE.Mesh||child instanceof THREE.Group)&&child.parent instanceof THREE.Scene&&(child.name.toLowerCase().includes("collider")?(colliders.push(child),Utils.print(++cnt+') Collider.name "'+child.name+'"',"#5588aa")):(child.name.toLowerCase().includes("actor")||child.name.toLowerCase().includes("character"))&&(actor=child,Utils.print('Actor.name "'+child.name+'"',"#5588FF")))}),console.groupEnd();var body=new CANNON.Body({mass:1});body.threemesh=actor,colliders.forEach(collider=>{collider.receiveShadow=!1,collider.castShadow=!1,collider.material=null;var shape=self.physics.bodyUtils.createShapeFromMesh(collider),v2=collider.position.clone().sub(actor.position);body.addShape(shape,v2)}),body.position.copy(actor.position),body.quaternion.copy(actor.quaternion),self.graphics.scene.add(actor),self.physics.world.addBody(body),console.groupEnd(),resolve({body:body,mesh:actor,colliders:colliders}),callback&&callback({body:body,mesh:actor,colliders:colliders})})})}}var Options={engine:{},physics:{enabled:!0,useDebug:!1,debugColor:16776960,bodyOffset:.01,allowSleep:!1},graphics:{sceneType:"env",useReflection:!0,fog:{color:8947848,near:50,far:200},env:{path:"./images/Park2"},bkg:{color:1114112},models:["./models/prebuilds/scenes/default.gltf"],camera:{fov:75,near:.1,far:1e3,position:{x:3,y:5,z:-15}},renderer:{antialias:!1,alpha:!1,gammaInput:!0,gammaOutput:!0,shadowMap:{enabled:!0,soft:!0,type:THREE.PCFSoftShadowMap}},controls:{enabled:!0,useKeys:!1},directionalLight:{enabled:!1,useHelper:!1,color:16777215,intensity:2,castShadow:!0,position:{x:20,y:20,z:10},shadow:{bias:0,mapSize:{width:512,height:512},camera:{visible:!0,near:.5,far:1e3,top:10,bottom:-10,right:10,left:-10}}},spotLight:{enabled:!1,useHelper:!0,color:16777215,intensity:5,castShadow:!0,distance:100,decay:2,angle:Math.PI/8,penumbra:.8,position:{x:10,y:20,z:10},shadow:{bias:0,mapSize:{width:1024,height:1024},camera:{visible:!0,Fov:90,near:.5,far:1e3}}},pointLight:{enabled:!1,useHelper:!1,color:16777215,intensity:1,castShadow:!0,distance:50,decay:2,position:{x:8,y:10,z:-5},shadow:{bias:0,mapSize:{width:1024,height:1024},camera:{visible:!0,Fov:90,near:.5,far:1e3}}},ambientLight:{enabled:!0,color:16772812,intensity:.9},grids:{enabled:!0,size:40,divisions:40,colorCenterLine:7829367,colorGrid:5592405,position:{x:0,y:.01,z:0}},axes:{enabled:!0,size:4,position:{x:0,y:.02,z:0}}}};Utils.printInfo("ECC-CGP-Engine-Core  v0.5 (22 Feb, 2019) loaded");class EngineCore{constructor(options){this.defaultOptions=Options,this.options=this.parseOption(options,Options),this.options.graphics=this.parseOption(this.options.graphics,{}),this.options.graphics.sceneType=this.parseOption(this.options.graphics.sceneType,Options.graphics.sceneType),this.options.graphics.env=this.parseOption(this.options.graphics.env,{}),this.options.graphics.env.path=this.parseOption(this.options.graphics.env.path,Options.graphics.env.path),this.options.graphics.useReflection=this.parseOption(this.options.graphics.useReflection,Options.graphics.useReflection),this.options.graphics.controls=this.parseOption(this.options.graphics.controls,{}),this.options.graphics.controls.enabled=this.parseOption(this.options.graphics.controls.enabled,Options.graphics.controls.enabled),this.options.graphics.controls.useKeys=this.parseOption(this.options.graphics.controls.useKeys,Options.graphics.controls.useKeys),this.options.graphics.camera=this.parseOption(this.options.graphics.camera,Options.graphics.camera),this.options.graphics.renderer=this.parseOption(this.options.graphics.renderer,Options.graphics.renderer),this.options.physics=this.parseOption(this.options.physics,{}),this.options.physics.enabled=this.parseOption(this.options.physics.enabled,Options.physics.enabled),this.options.physics.useDebug=this.parseOption(this.options.physics.useDebug,Options.physics.useDebug),this.options.physics.debugColor=this.parseOption(this.options.physics.debugColor,Options.physics.debugColor),this.options.physics.bodyOffset=this.parseOption(this.options.physics.bodyOffset,Options.physics.bodyOffset),this.options.graphics.camera.position=this.parseOption(this.options.graphics.camera.position,{}),this.options.graphics.camera.position.x=this.parseOption(this.options.graphics.camera.position.x,Options.graphics.camera.position.x),this.options.graphics.camera.position.y=this.parseOption(this.options.graphics.camera.position.y,Options.graphics.camera.position.y),this.options.graphics.camera.position.z=this.parseOption(this.options.graphics.camera.position.z,Options.graphics.camera.position.z),this.graphics=new Graphics(this.options.graphics),this.physics=new Physics(this.graphics,this.options.physics),this.graphics.init(),this.physics.init(),this.keyboard=new Keyboard,this.mouse=new Mouse,this.raycaster=new RayCast(this.graphics,this.physics),this.assetLoader=new AssetLoader(this.graphics,this.physics),this.enabled=!0,this.reqAmtId=void 0,this.callback=null,this.params={dt:0,curTime:performance.now(),prvTime:performance.now(),renderingTime:0,processingTime:0,graphicsTime:0,physicsTime:0,frameCnt:0}}init(options,callback){options&&"function"==typeof options&&(callback=options,options=void 0),(options=this.parseOption(options,{})).envPath=this.parseOption(options.envPath,this.graphics.options.env.path),options.models=this.parseOption(options.models,void 0);const self=this;return new Promise((resolve,reject)=>{console.group("%cEngine.Init","color:#3355cc"),self.graphics.loaderUtils.loadCubeTexture(options.envPath).then(cubeTexture=>{if(cubeTexture&&console.log('%cThe env texture "'+options.envPath+'" is loaded',"color:#3355cc"),options.models){var modelCount=0,numModels=options.models.length,scenes=[];options.models.forEach(file=>{self.graphics.loaderUtils.loadGLTF(file).then(gltf=>{if(console.log('%cThe GLTF model "'+file+'" is loaded',"color:#3355cc"),self.graphics.scene.add(gltf.scene),++modelCount>=numModels){var obj={graphics:self.graphics,physics:self.physics,scenes:scenes,envTexture:cubeTexture};console.groupEnd(),resolve(obj),callback&&callback(obj),this.initDefaultScene(cubeTexture)}})})}else{var obj={graphics:self.graphics,physics:self.physics,scenes:scenes,envTexture:cubeTexture};console.groupEnd(),resolve(obj),callback&&callback(obj),this.initDefaultScene(cubeTexture)}})})}initDefaultScene(cubeTexture){this.graphics.options.ambientLight=this.parseOption(this.graphics.options.ambientLight,Options.graphics.ambientLight),this.graphics.options.ambientLight.enabled&&this.graphics.lightUtils.addAmbientLight(this.graphics.options.ambientLight),this.graphics.options.pointLight=this.parseOption(this.graphics.options.pointLight,Options.graphics.pointLight),this.graphics.options.pointLight.enabled&&this.graphics.lightUtils.addPointLight(this.graphics.options.pointLight),this.graphics.options.spotLight=this.parseOption(this.graphics.options.spotLight,Options.graphics.spotLight),this.graphics.options.spotLight.enabled&&this.graphics.lightUtils.addSpotLight(this.graphics.options.spotLight),this.graphics.options.directionalLight=this.parseOption(this.graphics.options.directionalLight,Options.graphics.directionalLight),this.graphics.options.directionalLight.enabled&&this.graphics.lightUtils.addDirectionalLight(this.graphics.options.directionalLight),this.graphics.options.grids=this.parseOption(this.graphics.options.grids,Options.graphics.grids),this.graphics.options.grids.enabled&&this.graphics.helperUtils.addGrids(this.graphics.options.grids),this.graphics.options.axes=this.parseOption(this.graphics.options.axes,Options.graphics.axes),this.graphics.options.axes.enabled&&this.graphics.helperUtils.addAxes(this.graphics.options.axes),this.options.graphics.env=this.parseOption(this.options.graphics.env,{}),this.options.graphics.env.path=this.parseOption(this.options.graphics.env.path,"./images/Bridge2"),this.options.graphics.env.cubeTexture=cubeTexture,this.graphics.setSceneType(this.options.graphics.sceneType,this.options.graphics),this.options.graphics.useReflection&&(cubeTexture?this.graphics.meshUtils.applyReflectionMapToAllMeshes(cubeTexture):(this.options.graphics.env.path=this.parseOption(this.options.graphics.env.path,Options.graphics.env.path),this.graphics.loaderUtils.loadCubeTexture(this.options.graphics.env.path).then(cubeTexture=>{this.graphics.meshUtils.applyReflectionMapToAllMeshes(cubeTexture)}))),this.physics.bodyUtils.createBodiesFromScene(this.graphics.scene);const cameras=[],lights=[];function _getCameraAndLight(c){c instanceof THREE.Object3D&&c.name.toLowerCase().includes("camera")?cameras.push(c):c instanceof THREE.Object3D&&c.name.toLowerCase().includes("pointlight")&&lights.push(c)}this.graphics.scene.children.forEach(c1=>{c1 instanceof THREE.Scene?c1.children.forEach(c2=>{c2 instanceof THREE.Scene?c2.children.forEach(c3=>{console.log("LEVEL 3 !!!")}):_getCameraAndLight(c2)}):_getCameraAndLight(c1)}),cameras.length>0&&(console.log(cameras),this.graphics.camera.position.copy(cameras[0].position));for(var i=0;i<lights.length;i++){this.graphics.lightUtils.addPointLight({}).position.copy(lights[i].position)}console.group("%cEngine Options","color:blue"),console.group("%cGraphics Options","color:#0055AA"),console.dir(this.graphics.options),console.groupEnd(),console.group("%cPhysics Options","color:orange"),console.dir(this.physics.options),console.groupEnd(),console.group("%cDefault Options","color:#99CC99"),console.dir(Options),console.groupEnd(),console.groupEnd()}update(){if(!0===this.enabled&&this.reqAmtId){if(this.reqAmtId=window.requestAnimationFrame(this.update.bind(this)),this.params.curTime=performance.now(),this.params.renderingTime=1e3*(this.params.curTime-this.params.prvTime),this.params.dt=this.params.curTime-this.params.prvTime,!0===this.options.physics.enabled){const pt0=performance.now();this.physics.update(this.params.dt),this.params.physicsTime=1e3*(performance.now()-pt0)}const gt0=performance.now();this.graphics.update(),this.params.graphicsTime=1e3*(performance.now()-gt0),this.params.frameCnt++,this.params.processingTime=1e3*(performance.now()-this.params.curTime),this.callback&&this.callback(this.params),this.params.prvTime=this.params.curTime}return this}start(callback){return this.callback=callback,this.enabled=!0,this.reqAmtId=window.requestAnimationFrame(this.update.bind(this)),this}stop(){return this.enabled=!1,this.reqAmtId&&(window.cancelAnimationFrame(this.reqAmtId),this.reqAmtId=null),this}on(evt,cbk){return window.addEventListener(evt,event=>{event.preventDefault(),event.stopPropagation(),cbk(event)}),this}parseOption(opt,def){return null==opt?def:opt}getDefaultOptions(){return this.defaultOptions}}exports.THREE=THREE,exports.CANNON=CANNON,exports.Graphics=Graphics,exports.Physics=Physics,exports.RayCast=RayCast,exports.Keyboard=Keyboard,exports.Mouse=Mouse,exports.AssetLoader=AssetLoader,exports.Options=Options,exports.Utils=Utils,exports.EngineCore=EngineCore;